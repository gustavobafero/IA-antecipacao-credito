import streamlit as st
from openai import OpenAI, RateLimitError
from datetime import datetime
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from matplotlib.ticker import PercentFormatter
from io import BytesIO
from fpdf import FPDF
import unicodedata
import tempfile
import locale
import numpy as np
import pandas as pd

# Configura√ß√£o de localiza√ß√£o para formata√ß√£o brasileira
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')  # fallback


def formatar_moeda(valor):
    """
    Formata valor num√©rico como moeda brasileira.
    """
    try:
        return f"R$ {valor:,.2f}".replace(",", "v").replace(".", ",").replace("v", ".")
    except:
        return f"R$ {valor:.2f}".replace(".", ",")


def calcular_preco_minimo(custo_base, risco_inadimplencia, margem_desejada_percentual):
    """
    Calcula o pre√ßo m√≠nimo com base no custo, risco e margem desejada.
    """
    ajuste_risco = 1 + risco_inadimplencia
    margem = 1 + (margem_desejada_percentual / 100)
    return custo_base * ajuste_risco * margem

# ----------------- Fun√ß√£o de gera√ß√£o de PDF atualizada ----------------- #
def gerar_pdf(data_dict,
              grafico_risco_bytes,
              grafico_fatores_bytes,
              grafico_dist_bytes,
              preco_melhor,
              preco_pior,
              alerta_text,
              resumo,
              adequacao_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Relat√≥rio de Precifica√ß√£o e Risco de Cr√©dito", ln=True, align='C')
    pdf.ln(10)

    # 1) Dados principais
    for chave, valor in data_dict.items():
        pdf.cell(0, 8, txt=clean_text(f"{chave}: {valor}"), ln=True)
    pdf.ln(5)

    # 2) Explica√ß√£o ‚Äúpara crian√ßa‚Äù
    pdf.set_font("Arial", style='I', size=11)
    texto_inf = (
        "Como a IA chegou no pre√ßo m√≠nimo?\n"
        "- Ela considera o valor do empr√©stimo e protege-se do risco.\n"
        "- Adiciona uma margem de lucro para garantir rentabilidade.\n"
        "- O resultado √© um pre√ßo justo, seguro e vantajoso para todos."
    )
    pdf.multi_cell(0, 8, clean_text(texto_inf))

    # 3) Gr√°fico Risco x Retorno
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="An√°lise de Risco x Retorno", ln=True)
    if grafico_risco_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_risco_bytes.getvalue())
            path = tmp.name
        pdf.image(path, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf1 = (
        "No gr√°fico:\n"
        "- Zona verde (0‚Äì30%): baixo risco, √≥timo retorno.\n"
        "- Zona amarela (30‚Äì60%): risco intermedi√°rio, aten√ß√£o.\n"
        "- Zona vermelha (60‚Äì100%): alto risco, cuidado.\n"
        "O ponto mostra a sua simula√ß√£o. Busque sempre estar na √°rea verde!"
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf1))

    # 4) Gr√°fico Fatores de Risco
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Fatores de Risco", ln=True)
    if grafico_fatores_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_fatores_bytes.getvalue())
            path = tmp.name
        pdf.image(path, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(
        0,
        8,
        clean_text("Mostra quais indicadores mais afetam a inadimpl√™ncia.")
    )

    # 5) Distribui√ß√£o de Risco (histograma)
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Distribui√ß√£o de Risco (Simula√ß√µes)", ln=True)
    if grafico_dist_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_dist_bytes.getvalue())
            path = tmp.name
        pdf.image(path, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(
        0,
        8,
        clean_text("Histograma das simula√ß√µes de risco, com seu risco destacado.")
    )

    # 6) Cen√°rios: melhor vs. pior
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Cen√°rios: Melhor vs. Pior Caso", ln=True)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 8, txt=clean_text(f"Melhor caso (risco 0%): Pre√ßo = {preco_melhor}"), ln=True)
    pdf.cell(0, 8, txt=clean_text(f"Pior caso   (risco 100%): Pre√ßo = {preco_pior}"), ln=True)

    # 7) Alerta de Outlier
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Alerta de Outlier", ln=True)
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 8, clean_text(alerta_text))

    # 8) Resumo Executivo e Adequa√ß√£o ao Apetite
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Resumo Executivo", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(resumo))
    pdf.ln(5)
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Adequa√ß√£o ao Apetite de Risco", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(adequacao_text))

    return BytesIO(pdf.output(dest='S').encode('latin1'))
# ---------------------------------------------------------------------- #

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="IA Cr√©dito + Risco de Inadimpl√™ncia", layout="centered")
st.title("IA para Precifica√ß√£o de Antecipa√ß√£o de Cr√©dito")

# Cliente OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])


def clean_text(text):
    """
    Normaliza texto para evitar problemas de codifica√ß√£o no PDF.
    """
    return unicodedata.normalize('NFKD', text).encode('latin1', 'ignore').decode('latin1')

# Formul√°rio de entrada
st.header("1. Informa√ß√µes da Opera√ß√£o")
with st.form("formulario_operacao"):
    # ... (mant√©m todo o seu formul√°rio original) ...
    enviar = st.form_submit_button("Simular")

if enviar:
    # C√°lculos principais (mant√©m tudo igual at√© aqui)
    # ... (c√°lculos de prazo, risco, taxa_ideal, margem_estimada, retorno_esperado, preco_sugerido) ...

    # Exibi√ß√£o no Streamlit (mant√©m igual)
    # ... (st.write, st.markdown, gr√°ficos de risco x retorno, fatores de risco, histogramas, cen√°rios, alertas, resumo, adequa√ß√£o) ...

    # --- Coleta de buffers e textos para o PDF --- #
    # buffer histograma de distribui√ß√£o
    buf_dist = BytesIO()
    fig_dist.savefig(buf_dist, format='png', dpi=300, bbox_inches='tight')
    buf_dist.seek(0)

    # cen√°rios
    preco_melhor = formatar_moeda(calcular_preco_minimo(valor, 0.0, margem_desejada))
    preco_pior   = formatar_moeda(calcular_preco_minimo(valor, 1.0, margem_desejada))

    # alerta de outlier
    media = sim_risks.mean()
    desvio = sim_risks.std()
    if risco_total > media + 2*desvio:
        alerta_text = "‚ö†Ô∏è Seu risco est√° muito acima da m√©dia das simula√ß√µes."
    else:
        alerta_text = "‚úÖ Risco dentro da faixa esperada."

    # resumo executivo e adequa√ß√£o
    resumo = (
        f"O cliente {nome_cliente} apresenta risco de {risco_total:.1f}% "
        f"e retorno esperado de {formatar_moeda(retorno_esperado)}. "
        f"A taxa ideal sugerida √© {taxa_ideal}%." 
    )
    adequacao_text = (
        f"Opera√ß√£o {'dentro' if risco_total <= 50 else 'fora'} do apetite "
        f"de risco ({'‚â§' if risco_total <= 50 else '>'} 50%)."
    )

    # dados do relat√≥rio
    dados_relatorio = {
        "Cliente": nome_cliente,
        "CNPJ": cnpj_cliente,
        "Valor da opera√ß√£o": formatar_moeda(valor),
        "Prazo (dias)": prazo,
        "Taxa Ideal (%)": taxa_ideal,
        "Margem (%)": margem_estimada,
        "Retorno Esperado (R$)": formatar_moeda(retorno_esperado),
        "Compara√ß√£o com concorr√™ncia": ('Acima do mercado' if taxa_ideal > taxa_concorrencia + 0.05 else 'Abaixo do mercado' if taxa_ideal < taxa_concorrencia - 0.05 else 'Na m√©dia do mercado'),
        "Risco de inadimpl√™ncia": f"{risco_total}% ({cor_risco})",
        "Pre√ßo m√≠nimo sugerido pela IA": formatar_moeda(preco_sugerido),
        "Data do √∫ltimo faturamento": data_faturamento.strftime('%d/%m/%Y')
    }

    # gera√ß√£o do PDF
    pdf_bytes = gerar_pdf(
        dados_relatorio,
        buf_risco,
        buf_fat,
        buf_dist,
        preco_melhor,
        preco_pior,
        alerta_text,
        resumo,
        adequacao_text
    )
    st.download_button("üìÑ Baixar relat√≥rio em PDF", data=pdf_bytes, file_name="relatorio_credito.pdf")

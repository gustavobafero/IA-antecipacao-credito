import streamlit as st
from openai import OpenAI, RateLimitError
from datetime import datetime
import requests
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from matplotlib.ticker import PercentFormatter
from io import BytesIO
from fpdf import FPDF
import unicodedata
import tempfile
import locale
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import math
from twilio.rest import Client
import sqlite3
import hashlib
from datetime import datetime
import os
DATA_PATH = "clientes.db" 

def hash_password(password: str) -> str:
    """Retorna o SHA-256 hex digest da senha."""
    return hashlib.sha256(password.encode("utf-8")).hexdigest()

# 2) Conex√£o e cria√ß√£o da tabela de clientes
conn = sqlite3.connect("clientes.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS clients (
    username TEXT PRIMARY KEY,
    password_hash TEXT NOT NULL,
    cnpj TEXT NOT NULL,
    celular TEXT NOT NULL,
    email TEXT NOT NULL,
    created_at TEXT NOT NULL
)
""")
conn.commit()
cursor.execute("""
CREATE TABLE IF NOT EXISTS proposals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_cliente   TEXT,
    cnpj           TEXT,
    valor_nota     REAL,
    taxa_ia        REAL,
    taxa_cliente   REAL,
    deseja_contato TEXT,
    created_at     TEXT
)
""")
conn.commit()
# 4) Fun√ß√µes de registro/autentica√ß√£o usando o hash
def register_client(username, password, cnpj, celular, email):
    pwd_hash = hash_password(password)
    try:
        cursor.execute(
            "INSERT INTO clients (username, password_hash, cnpj, celular, email, created_at) VALUES (?,?,?,?,?,?)",
            (username, pwd_hash, cnpj, celular, email, datetime.now().isoformat())
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        # Usu√°rio j√° existe
        return False
    except sqlite3.Error as e:
        # Exibe o erro completo para diagn√≥stico
        st.error(f"Erro no banco de dados: {e}")
        return False


def authenticate_client(username, password):
    cursor.execute("SELECT password_hash FROM clients WHERE username = ?", (username,))
    row = cursor.fetchone()
    if row and row[0] == hash_password(password):
        return True
    return False

st.set_page_config(page_title="IA de Cr√©dito", layout="centered")
if 'role' not in st.session_state:
    st.title("üîê Bem-vindo")
    modo = st.radio("Escolha:", ["Entrar", "Cadastrar-se"])
    if modo == "Cadastrar-se":
        with st.form("form_register"):
            u = st.text_input("Usu√°rio")
            p = st.text_input("Senha", type="password")
            p2= st.text_input("Confirme a senha", type="password")
            cnpj = st.text_input("CNPJ")
            celular = st.text_input("Celular")
            email   = st.text_input("Email")
            ok = st.form_submit_button("Criar conta")
        if ok:
            if not all([u, p, p2, cnpj, celular, email]):
                st.error("Preencha todos os campos")
            elif p != p2:
                st.error("As senhas n√£o coincidem")
            elif register_client(u, p, cnpj, celular, email):
                st.success("Conta criada! Fa√ßa login.")
            else:
                st.error("Usu√°rio j√° existe.")
        st.stop()

    else:  # Entrar
        with st.form("form_login"):
            u = st.text_input("Usu√°rio")
            p = st.text_input("Senha", type="password")
            ok = st.form_submit_button("Entrar")
        if ok:
            # admin via secrets
            if u == st.secrets["ADMIN"]["USERNAME"] and p == st.secrets["ADMIN"]["PASSWORD"]:
                st.session_state.role = 'admin'
            # cliente via DB
            elif authenticate_client(u, p):
                st.session_state.role = 'cliente'
            else:
                st.error("Usu√°rio ou senha inv√°lidos")
        st.stop()
        
def formatar_moeda(valor):
    """
    Formata valor num√©rico como moeda brasileira.
    """
    try:
        return f"R$ {valor:,.2f}".replace(",", "v").replace(".", ",").replace("v", ".")
    except:
        return f"R$ {valor:.2f}".replace(".", ",")
def calcular_preco_minimo(custo_base, risco_inadimplencia, margem_desejada_percentual):
    """
    Calcula o pre√ßo m√≠nimo com base no custo, risco e margem desejada.
    """
    ajuste_risco = 1 + risco_inadimplencia
    margem = 1 + (margem_desejada_percentual / 100)
    return custo_base * ajuste_risco * margem

def clean_text(text):
    """
    Normaliza texto para evitar problemas de codifica√ß√£o no PDF.
    """
    return unicodedata.normalize('NFKD', text).encode('latin1', 'ignore').decode('latin1')

def gerar_pdf(data_dict,
               grafico_risco_bytes,
               grafico_fatores_bytes,
               grafico_dist_bytes,
               preco_melhor,
               preco_pior,
               alerta_text,
               resumo,
               adequacao_text):
    pdf = FPDF()
    # P√°gina t√≠tulo e dados b√°sicos
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Relat√≥rio de Precifica√ß√£o e Risco de Cr√©dito", ln=True, align='C')
    pdf.ln(10)
    for chave, valor in data_dict.items():
        pdf.cell(0, 8, txt=clean_text(f"{chave}: {valor}"), ln=True)
    pdf.ln(5)
    # Explica√ß√£o simples
    pdf.set_font("Arial", style='I', size=11)
    texto_inf = (
        "Como a IA chegou no pre√ßo m√≠nimo?\n"
        "- Considera o valor do empr√©stimo e protege-se do risco.\n"
        "- Adiciona margem de lucro para garantir rentabilidade.\n"
        "- Oferece pre√ßo justo, seguro e vantajoso para todos."
    )
    pdf.multi_cell(0, 8, clean_text(texto_inf))
    # Gr√°fico Risco x Retorno
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="An√°lise de Risco x Retorno", ln=True)
    if grafico_risco_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_risco_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf1 = (
        "Este gr√°fico mostra como o risco de inadimpl√™ncia (eixo horizontal) se relaciona ao retorno esperado em R$.\n"
        "- √Årea verde (0% a 30%): baixo risco e potencial de retorno est√°vel.\n"
        "- √Årea amarela (30% a 60%): risco intermedi√°rio; aten√ß√£o ao investimento.\n"
        "- √Årea vermelha (60% a 100%): alto risco; retorno incerto."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf1))
    # Gr√°fico Fatores
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Fatores de Risco", ln=True)
    if grafico_fatores_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_fatores_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf2 = (
        "Este gr√°fico de barras indica a contribui√ß√£o percentual de cada fator para o risco total:\n"
        "- Rating: confiabilidade de cr√©dito do cliente.\n"
        "- Idade da empresa: maturidade de mercado.\n"
        "- Protestos: hist√≥rico de d√≠vidas.\n"
        "- Faturamento: solidez financeira."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf2))
    # Distribui√ß√£o de Risco
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Distribui√ß√£o de Risco (Simula√ß√µes)", ln=True)
    if grafico_dist_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_dist_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf3 = (
        "Este histograma mostra a frequ√™ncia dos n√≠veis de risco em 500 simula√ß√µes aleat√≥rias.\n"
        "A linha vertical destaca o seu risco calculado, permitindo comparar com a m√©dia das simula√ß√µes."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf3))
    # Cen√°rios
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Cen√°rios: Melhor vs. Pior Caso", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(
        f"Com base no mesmo valor de opera√ß√£o, o melhor cen√°rio (risco 0%) gera pre√ßo {preco_melhor}, "
        f"enquanto o pior cen√°rio (risco 100%) gera {preco_pior}."
    ))
    # Alerta Outlier
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Alerta de Outlier", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(alerta_text))
    # Resumo Executivo e Adequa√ß√£o
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Resumo Executivo", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(resumo))
    pdf.ln(5)
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Adequa√ß√£o ao Apetite de Risco", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(adequacao_text))
    return BytesIO(pdf.output(dest='S').encode('latin1'))

# Interface de An√°lise de Risco (sem Serasa)
def exibir_interface_analise_risco():
    st.header("An√°lise de Risco e Precifica√ß√£o")
    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

    with st.form("form_operacao"):
        st.subheader("Dados da Opera√ß√£o")
        nome_cliente    = st.text_input("Nome do cliente")
        cnpj_cliente    = st.text_input("CNPJ do cliente (opcional)")
        valor           = st.number_input("Valor da opera√ß√£o (R$)", min_value=0.0, format="%.2f")
        data_operacao   = st.date_input("Data da opera√ß√£o", value=datetime.today(), format="DD/MM/YYYY")
        data_vencimento = st.date_input("Data de vencimento", format="DD/MM/YYYY")
        rating          = st.slider("Rating do cliente", 0, 100, 80)
        margem_desejada = st.number_input("Margem desejada (%)", min_value=0.0, value=1.0)
        custo_capital   = st.number_input("Custo do capital (%)", min_value=0.0, value=1.5)

        st.markdown("### Dados de Cr√©dito (manual)")
        score_serasa   = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750)
        idade_empresa  = st.number_input("Idade da empresa (anos)", 0, 100, 5)
        protestos_bool = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"]) == "Sim"
        faturamento    = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f")

        enviar = st.form_submit_button("Simular")
        if not enviar:
            return

        # C√°lculos
        prazo = (data_vencimento - data_operacao).days
        risco = (100 - rating) / 100
        ajuste = max(0.5 - valor / 100000, 0)
        taxa_ideal = round(custo_capital + margem_desejada + risco*2 + ajuste, 2)
        margem_estimada = round(taxa_ideal - custo_capital, 2)
        retorno_esperado = round(valor * (margem_estimada / 100), 2)
        preco_sugerido = calcular_preco_minimo(valor, risco, margem_desejada)

        st.markdown("## Resultado da Simula√ß√£o")
        st.write(f"Prazo: {prazo} dias")
        st.write(f"Taxa ideal: {taxa_ideal}%")
        st.write(f"Margem estimada: {margem_estimada}%")
        st.write(f"Retorno esperado: {formatar_moeda(retorno_esperado)}")
        st.write(f"Pre√ßo sugerido: {formatar_moeda(preco_sugerido)}")
        st.markdown("---")

        # Risco (com dados manuais)
        risco_score   = 0 if score_serasa >= 800 else 0.5 if score_serasa >= 600 else 1
        risco_idade   = 0 if idade_empresa >= 5 else 0.5
        risco_protesto= 1 if protestos_bool else 0
        risco_fat     = 0 if faturamento >= 500000 else 0.5
        risco_total   = round((risco_score*0.4 + risco_idade*0.2 + risco_protesto*0.25 + risco_fat*0.15)*100, 2)
        cor = "üü¢ Baixo" if risco_total <= 30 else "üü° Moderado" if risco_total <= 60 else "üî¥ Alto"
        st.write(f"Risco: {cor} ({risco_total}%)")
        st.markdown("---")

# Interface de Cota√ß√£o de Cr√©dito via XML (sem Serasa)
def exibir_interface_cliente_cotacao():
    st.header("Cota√ß√£o de Antecipa√ß√£o de Cr√©dito")
    st.write("Fa√ßa o upload do **XML da Nota Fiscal Eletr√¥nica (NF-e)** para gerar sua cota√ß√£o:")
    nome_cliente = st.text_input("Nome do cliente", key="xml_nome_cliente")

    xml_file = st.file_uploader("Upload do XML", type=["xml"])
    if xml_file is not None:
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}

            valor_nota = float(root.find('.//nfe:vNF', ns).text.replace(",", "."))
            cnpj_dest  = root.find('.//nfe:CNPJ', ns).text
            data_emissao_tag = root.find('.//nfe:dhEmi', ns)
            data_emissao = None
            if data_emissao_tag is not None:
                raw = data_emissao_tag.text[:10]
                date_obj = datetime.strptime(raw, "%Y-%m-%d")
                data_emissao = date_obj.strftime("%d/%m/%Y")

                parcelas = []
                cobr = root.find('.//nfe:cobr', ns)
            if cobr is not None:
                for dup in cobr.findall('nfe:dup', ns):
                    numero = dup.find('nfe:nDup', ns).text if dup.find('nfe:nDup', ns) is not None else None
                    raw_venc = dup.find('nfe:dVenc', ns).text
                    data_venc = datetime.strptime(raw_venc[:10], "%Y-%m-%d").strftime("%d/%m/%Y")
                    raw_val = dup.find('nfe:vDup', ns).text.replace(",", ".")
                    valor_dup = float(raw_val)
                    parcelas.append({
                        "nDup": numero,
                        "dVenc": data_venc,
                        "vDup": formatar_moeda(valor_dup)
                })

            with st.expander("Detalhes da Nota", expanded=False):
                st.write(f"**Valor da nota fiscal:** {formatar_moeda(valor_nota)}")
                st.write(f"**CNPJ do cliente:** {cnpj_dest}")
                if data_emissao:
                    st.write(f"**Data de emiss√£o:** {data_emissao}")
                if parcelas:
                    st.markdown("**Parcelas e vencimentos:**")
                    for p in parcelas:
                        num = f"Parcela {p['nDup']}: " if p['nDup'] else ""
                        st.write(f"- {num}{p['dVenc']} ‚Üí {p['vDup']}")

            st.markdown("### Dados de Cr√©dito (manual)")
            score_xml     = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750, key="xml_score")
            idade_empresa = st.number_input("Idade da empresa (anos)", 0, 100, 5, key="xml_idade")
            protestos     = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"], key="xml_protestos")
            faturamento   = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f", key="xml_fat")

            # C√°lculo do risco total
            risco_score = round(1 / (1 + math.exp(-(600 - score_xml) / 50)), 3)
            risco_idade = round(1 / (1 + math.exp(-(5 - idade_empresa) / 1)), 3)
            risco_protesto = 1 if protestos == "Sim" else 0
            risco_fat = round(1 / (1 + math.exp(-(500_000 - faturamento) / 100_000)), 3)
            risco_total = round(
                (risco_score    * 0.40
                + risco_idade   * 0.20
                + risco_protesto* 0.25
                + risco_fat     * 0.15)
                * 100,
                2
            )

            suggested_taxa = round(risco_total, 2)
            
            taxa_ia = round(risco_total * 0.1, 2)
            st.markdown(
                f"<p style='font-size:24px; font-weight:bold; margin:10px 0;'>üî• Taxa sugerida pela IA: {taxa_ia}%</p>",
                unsafe_allow_html=True
            )

    # campo edit√°vel para o cliente definir a taxa de antecipa√ß√£o
            taxa_cliente = st.number_input(
                "Defina a taxa de antecipa√ß√£o (%)",
                min_value=0.0,
                max_value=10.0,
                step=0.1,
                value=taxa_ia,
                format="%.2f"
            )

    # c√°lculo do valor a receber com a taxa escolhida pelo cliente
            valor_receber = valor_nota * (1 - taxa_cliente/100)
            st.metric("Voc√™ receber√°", f"{formatar_moeda(valor_receber)}")

            st.write("Este c√°lculo n√£o leva em considera√ß√£o dados de concentra√ß√£o de carteira e eventuais riscos que n√£o apare√ßam no Serasa")

            receber_propostas = st.checkbox(
            "Desejo receber propostas e que entrem em contato comigo"
            )
            
            if st.button("Solicitar proposta", key="xml_solicitar"):
                msg_body = (
                      f"üì© *Nova solicita√ß√£o de proposta*\n"
                    f"‚Ä¢ Cliente: {nome_cliente}\n"
                    f"‚Ä¢ CNPJ: {cnpj_dest}\n"
                    f"‚Ä¢ Valor da NF-e: {formatar_moeda(valor_nota)}\n"
                    f"‚Ä¢ Emiss√£o: {data_emissao or '‚Äî'}\n"
                    f"‚Ä¢ Taxa IA sugerida: {taxa_ia}%\n"
                    f"‚Ä¢ Taxa escolhida: {taxa_cliente}%\n"
                )
                if parcelas:
                    msg_body += "‚Ä¢ Parcelas:\n"
                    for p in parcelas:
                        num = f"{p['nDup']}. " if p['nDup'] else ""
                        msg_body += f"   ‚Äì {num}{p['dVenc']} ‚Üí {p['vDup']}\n"

                contato = "SIM" if receber_propostas else "N√ÉO"
                msg_body += f"‚Ä¢ Deseja contato: {contato}\n"
                
                client = Client(
                    st.secrets["TWILIO_ACCOUNT_SID"],
                    st.secrets["TWILIO_AUTH_TOKEN"]
                )
                client.messages.create(
                    body=msg_body,
                    from_=f"whatsapp:{st.secrets['TWILIO_WHATSAPP_FROM']}",
                    to  =f"whatsapp:{st.secrets['ADMIN_WHATSAPP_TO']}"
                )
                st.success("‚úÖ Proposta enviada!")
            cursor.execute(
                    """
                    INSERT INTO proposals
                    (nome_cliente, cnpj, valor_nota, taxa_ia, taxa_cliente, deseja_contato, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                    """,
                    (
                        nome_cliente,
                        cnpj_dest,
                        valor_nota,
                        taxa_ia,
                        taxa_cliente,
                        contato,                    # "SIM" ou "N√ÉO"
                        datetime.now().isoformat()
                    )
                )
                conn.commit()
        except Exception as e:
            st.error(f"Erro ao processar o XML: {e}")
                

# --- Roteamento p√≥s-login ---
if st.session_state.role == 'admin':
    st.header("üìã Propostas Recebidas (Admin)")
        if os.path.exists(DATA_PATH):
        conn = sqlite3.connect(DATA_PATH, check_same_thread=False)
        df = pd.read_sql_query(
            "SELECT * FROM proposals ORDER BY created_at DESC",
            conn
        )
        st.dataframe(df)
    else:
        st.info("Ainda n√£o h√° propostas.")
elif st.session_state.role == 'cliente':
    st.header("üë§ Dashboard do Cliente")
    tab1, tab2 = st.tabs(["üí∞ Cota√ß√£o de Antecipa√ß√£o", "‚öôÔ∏è An√°lise de Risco"])
    with tab1:
        exibir_interface_cliente_cotacao()
    with tab2:
        exibir_interface_analise_risco()

# Configura√ß√£o de localiza√ß√£o para formata√ß√£o brasileira
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')  # fallback


st.stop()

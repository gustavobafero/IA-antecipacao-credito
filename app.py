chat, tudo bem? Vamos continuar o processo?

import streamlit as st
from openai import OpenAI, RateLimitError
from datetime import datetime
import requests
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from matplotlib.ticker import PercentFormatter
from io import BytesIO
from fpdf import FPDF
import unicodedata
import tempfile
import locale
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import math
from twilio.rest import Client
import hashlib
import os
import sqlite3
from sqlalchemy import create\_engine, text
import streamlit as st
DATA\_PATH = "clientes.db"
from io import StringIO

# --- Configura√ß√£o da p√°gina: deve ser o primeiro comando Streamlit ---

st.set\_page\_config(page\_title="Simula√ß√£o Antecipa√ß√£o", layout="centered")

# --- Navega√ß√£o inicial via simula√ß√£o ---

if 'navigate' not in st.session\_state:
st.session\_state\['navigate'] = None

if st.session\_state.navigate == "register":
\# fluxo principal ir√° lidar com cadastro
pass
elif st.session\_state.navigate == "login":
\# fluxo principal ir√° lidar com login
pass
else:
\# P√°gina Inicial (antes do login)
\# --- Estilos ---
st.markdown(""" <style>
.stApp { background-color: #FFFFFF; }
.header { font-size: 36px; font-weight: bold; text-align: center; margin-bottom: 10px; }
.subheader { font-size: 18px; text-align: center; margin-bottom: 30px; color: #555555; }
.resultado { background-color: #E3F2FD; padding: 20px; border-radius: 8px; text-align: center; margin-top: 20px; }
.cta { background-color: #0D47A1; color: white; padding: 15px; border-radius: 5px; text-align: center; margin-top: 30px; width: 100%; }
.cta\:hover { background-color: #1565C0; } </style>
""", unsafe\_allow\_html=True)

```
# --- Cabe√ßalho ---
st.markdown('<div class="header">Antecipe agora. Sem compromisso.</div>', unsafe_allow_html=True)
st.markdown('<div class="subheader">Envie uma nota fiscal eletr√¥nica (.XML) e descubra agora quanto voc√™ pode antecipar.</div>', unsafe_allow_html=True)

# --- Upload de XML ---
xml_file = st.file_uploader("Escolha seu arquivo XML", type=["xml"] )
if xml_file:
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()
        ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}
        valor_nota = float(root.find('.//nfe:vNF', ns).text.replace(',', '.'))

        # C√°lculo simples
        taxa_sugerida = 2.2  # Exemplo fixo, em %
        valor_receber = valor_nota * (1 - taxa_sugerida / 100)

        # Exibi√ß√£o do resultado
        st.markdown('<div class="resultado">', unsafe_allow_html=True)
        st.markdown(f"**Valor da nota:** R$ {valor_nota:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.'), unsafe_allow_html=True)
        st.markdown(f"**Taxa sugerida:** {taxa_sugerida:.1f}%", unsafe_allow_html=True)
        st.markdown(f"**Valor a receber:** R$ {valor_receber:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.'), unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    except Exception as e:
        st.error(f"Erro ao processar o XML: {e}")
else:
    st.info('Fa√ßa upload de um XML para come√ßar a simula√ß√£o.')

# --- Bot√µes de Navega√ß√£o ---
col1, col2 = st.columns(2)
with col1:
    if st.button("Assinar e continuar"):
        st.session_state.navigate = "register"
with col2:
    if st.button("J√° √© cliente? Fa√ßa login."):
        st.session_state.navigate = "login"

# Interrompe antes do fluxo de login/cadastro
st.stop()
```

st.markdown(
""" <style>
/\* Bot√µes padr√£o e elementos de a√ß√£o */
.stButton > button,
button,
\[data-testid="stToolbar"],
.css-1offfwp.edgvbvh3 {            /* classe gen√©rica de bot√µes */
background-color: #0D47A1 !important;  /* azul escuro */
color: #FFFFFF     !important;  /* texto branco \*/
}

```
  /* Itens selecionados da sidebar/nav */
  [data-testid="stSidebarNav"] > div[role="button"][aria-selected="true"] {
    background-color: #0A174E !important;  /* tom ainda mais escuro */
    color: #FFFFFF       !important;
  }

  /* Cabe√ßalho fixo (toolbar superior) */
  [data-testid="stToolbar"] {
    background-color: #0D47A1 !important;
  }
</style>
""",
unsafe_allow_html=True,
```

)

def hash\_password(password: str) -> str:
"""Retorna o SHA-256 hex digest da senha."""
return hashlib.sha256(password.encode("utf-8")).hexdigest()

# 2) Conex√£o e cria√ß√£o da tabela de clientes

@st.cache\_resource
@st.cache\_resource
def get\_db():
\# tenta ler DATABASE\_URL, se n√£o existir cai para sqlite local
url = st.secrets.get("DATABASE\_URL", f"sqlite:///{DATA\_PATH}")
\# se for SQLite n√£o precisa de sslmode
connect\_args = {}
if url.startswith("postgres") or url.startswith("mysql"):
connect\_args = {"sslmode": "require"}
engine = create\_engine(url, connect\_args=connect\_args)
return engine.connect()

# conex√£o √∫nica e cacheada

conn = get\_db()

# define o cursor para executar SQL puros

cursor = conn.connection.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS clients (
username       TEXT PRIMARY KEY,
password\_hash  TEXT NOT NULL,
cnpj           TEXT NOT NULL,
celular        TEXT NOT NULL,
email          TEXT NOT NULL,
plano          TEXT NOT NULL,      -- aqui a nova coluna
created\_at     TEXT NOT NULL
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS proposals (
id INTEGER PRIMARY KEY AUTOINCREMENT,
nome\_cliente       TEXT,
cnpj                TEXT,
valor\_nota          REAL,
taxa\_ia             REAL,
taxa\_cliente        REAL,
deseja\_contato      TEXT,
telefone\_contato    TEXT,
email\_contato       TEXT,
created\_at          TEXT
)
""")
conn.commit()

# 4) Fun√ß√µes de registro/autentica√ß√£o usando o hash

def register\_client(username, password, cnpj, celular, email, plano):
pwd\_hash = hash\_password(password)
try:
cursor.execute(
"""
INSERT INTO clients
(username, password\_hash, cnpj, celular, email, plano, created\_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
""",
(
username,
pwd\_hash,
cnpj,
celular,
email,
plano,                        # <-- aqui
datetime.now().isoformat()
)
)
conn.commit()
return True
except sqlite3.IntegrityError:
\# Usu√°rio j√° existe
return False
except sqlite3.Error as e:
st.error(f"Erro no banco de dados: {e}")
return False

def authenticate\_client(username, password):
cursor.execute("SELECT password\_hash FROM clients WHERE username = ?", (username,))
row = cursor.fetchone()
if row and row\[0] == hash\_password(password):
return True
return False

if 'role' not in st.session\_state:
st.title("üîê Bem-vindo a All Way Capital")
modo = st.radio("Escolha:", \["Entrar", "Cadastrar-se"])
if modo == "Cadastrar-se":
with st.form("form\_register"):
\# Dados de acesso e perfil
u       = st.text\_input("Usu√°rio")
p       = st.text\_input("Senha", type="password")
p2      = st.text\_input("Confirme a senha", type="password")
cnpj    = st.text\_input("CNPJ")
celular = st.text\_input("Celular")
email   = st.text\_input("Email")
\# --- dentro do st.form("form\_register"), logo ap√≥s o selectbox de plano ---
plano = st.selectbox(
"Selecione um plano de assinatura",
\[
"B√°sico ‚Äì R\$ 699,90",
"Intermedi√°rio ‚Äì R\$ 1.299,90",
"Avan√ßado ‚Äì R\$ 1.999,90"
]
)

```
# NOVO: periodicidade de cobran√ßa
        periodicidade = st.selectbox(
            "Periodicidade de cobran√ßa",
            ["Mensal", "Anual (10% de desconto)"]
        )

# c√°lculo do pre√ßo final
        preco_mensal = float(plano.split("R$")[1].replace(".", "").replace(",", "."))
        if periodicidade == "Mensal":
            preco_final = preco_mensal
        else:
            preco_final = preco_mensal * 12 * 0.9  # 10% de desconto no anual

        st.markdown(
            f"**Valor a pagar ({periodicidade.lower()}):** "
            f"R$ {preco_final:,.2f}"
            .replace(",", "X").replace(".", ",").replace("X", ".")
        )


    st.markdown("---")
    st.subheader("Dados do Cart√£o de Cr√©dito")

    # N√∫mero e nome
    cc_number = st.text_input(
        "N√∫mero do Cart√£o",
        placeholder="0000 0000 0000 0000",
        max_chars=19
    )
    cc_name = st.text_input("Nome impresso no cart√£o")

    # Validade e CVV
    col1, col2, col3 = st.columns([2,2,1])
    with col1:
        mes = st.selectbox("M√™s de validade", [f"{m:02d}" for m in range(1,13)])
    with col2:
        ano = st.selectbox("Ano de validade", [str(y) for y in range(datetime.now().year, datetime.now().year+10)])
    with col3:
        cvv = st.text_input("CVV", type="password", max_chars=4)

    # Parcelamento
    parcelas = st.selectbox(
        "N√∫mero de parcelas",
        list(range(1, 13))
    )

    # Juros por faixa de parcelas (exemplo)
    juros_tabela = {
        1: 0.00, 2: 0.00, 3: 0.00,
        4: 0.015, 5: 0.020, 6: 0.025,
        7: 0.030, 8: 0.035, 9: 0.040,
        10: 0.045, 11: 0.050, 12: 0.055
    }
    juros = juros_tabela[parcelas]

    # Extrai valor num√©rico do plano
    preco_plano = float(plano.split("R$")[1].replace(".", "").replace(",", "."))

    total_com_juros = preco_plano * (1 + juros)
    valor_parcela = total_com_juros / parcelas

    st.write(f"**Juros:** {juros*100:.1f}%")
    st.write(f"**Total a ser cobrado:** R$ {total_com_juros:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    st.write(f"**{parcelas}x de:** R$ {valor_parcela:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    ok = st.form_submit_button("Criar conta e pagar")

if ok:
    # aqui voc√™ deve validar todos os campos, processar o pagamento via gateway e s√≥ ent√£o:
    if not all([u, p, p2, cnpj, celular, email, cc_number, cc_name, mes, ano, cvv]):
        st.error("Preencha todos os campos do cadastro e do cart√£o")
    elif p != p2:
        st.error("As senhas n√£o coincidem")
    else:
        # Exemplo: processar pagamento antes de registrar
        pagamento_sucesso = True  # <- substitua pela chamada ao seu gateway

        if pagamento_sucesso and register_client(u, p, cnpj, celular, email, plano):
            st.success(f"Conta criada! Plano: {plano} em {parcelas}x")
        else:
            st.error("Falha no pagamento ou usu√°rio j√° existe.")
st.stop()



else:  # Entrar
    with st.form("form_login"):
        u = st.text_input("Usu√°rio")
        p = st.text_input("Senha", type="password")
        ok = st.form_submit_button("Entrar")
    if ok:
        # admin via secrets
        if u == st.secrets["ADMIN"]["USERNAME"] and p == st.secrets["ADMIN"]["PASSWORD"]:
            st.session_state.role = 'admin'
        # cliente via DB
        elif authenticate_client(u, p):
            st.session_state.role = 'cliente'
            st.session_state.username = u
        else:
            st.error("Usu√°rio ou senha inv√°lidos")
    st.stop()
    
```

def formatar\_moeda(valor):
"""
Formata valor num√©rico como moeda brasileira.
"""
try:
return f"R\$ {valor:,.2f}".replace(",", "v").replace(".", ",").replace("v", ".")
except:
return f"R\$ {valor:.2f}".replace(".", ",")
def calcular\_preco\_minimo(custo\_base, risco\_inadimplencia, margem\_desejada\_percentual):
"""
Calcula o pre√ßo m√≠nimo com base no custo, risco e margem desejada.
"""
ajuste\_risco = 1 + risco\_inadimplencia
margem = 1 + (margem\_desejada\_percentual / 100)
return custo\_base \* ajuste\_risco \* margem

def clean\_text(text):
"""
Normaliza texto para evitar problemas de codifica√ß√£o no PDF.
"""
return unicodedata.normalize('NFKD', text).encode('latin1', 'ignore').decode('latin1')

def gerar\_pdf(data\_dict,
grafico\_risco\_bytes,
grafico\_fatores\_bytes,
grafico\_dist\_bytes,
preco\_melhor,
preco\_pior,
alerta\_text,
resumo,
adequacao\_text):
pdf = FPDF()
\# P√°gina t√≠tulo e dados b√°sicos
pdf.add\_page()
pdf.set\_font("Arial", size=12)
pdf.cell(200, 10, txt="Relat√≥rio de Precifica√ß√£o e Risco de Cr√©dito", ln=True, align='C')
pdf.ln(10)
for chave, valor in data\_dict.items():
pdf.cell(0, 8, txt=clean\_text(f"{chave}: {valor}"), ln=True)
pdf.ln(5)
\# Explica√ß√£o simples
pdf.set\_font("Arial", style='I', size=11)
texto\_inf = (
"Como a IA chegou no pre√ßo m√≠nimo?\n"
"- Considera o valor do empr√©stimo e protege-se do risco.\n"
"- Adiciona margem de lucro para garantir rentabilidade.\n"
"- Oferece pre√ßo justo, seguro e vantajoso para todos."
)
pdf.multi\_cell(0, 8, clean\_text(texto\_inf))
\# Gr√°fico Risco x Retorno
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="An√°lise de Risco x Retorno", ln=True)
if grafico\_risco\_bytes:
with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
tmp.write(grafico\_risco\_bytes.getvalue())
caminho = tmp.name
pdf.image(caminho, w=180)
pdf.ln(5)
pdf.set\_font("Arial", size=11)
texto\_graf1 = (
"Este gr√°fico mostra como o risco de inadimpl√™ncia (eixo horizontal) se relaciona ao retorno esperado em R\$.\n"
"- √Årea verde (0% a 30%): baixo risco e potencial de retorno est√°vel.\n"
"- √Årea amarela (30% a 60%): risco intermedi√°rio; aten√ß√£o ao investimento.\n"
"- √Årea vermelha (60% a 100%): alto risco; retorno incerto."
)
pdf.multi\_cell(0, 8, clean\_text(texto\_graf1))
\# Gr√°fico Fatores
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Fatores de Risco", ln=True)
if grafico\_fatores\_bytes:
with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
tmp.write(grafico\_fatores\_bytes.getvalue())
caminho = tmp.name
pdf.image(caminho, w=180)
pdf.ln(5)
pdf.set\_font("Arial", size=11)
texto\_graf2 = (
"Este gr√°fico de barras indica a contribui√ß√£o percentual de cada fator para o risco total:\n"
"- Rating: confiabilidade de cr√©dito do cliente.\n"
"- Idade da empresa: maturidade de mercado.\n"
"- Protestos: hist√≥rico de d√≠vidas.\n"
"- Faturamento: solidez financeira."
)
pdf.multi\_cell(0, 8, clean\_text(texto\_graf2))
\# Distribui√ß√£o de Risco
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Distribui√ß√£o de Risco (Simula√ß√µes)", ln=True)
if grafico\_dist\_bytes:
with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
tmp.write(grafico\_dist\_bytes.getvalue())
caminho = tmp.name
pdf.image(caminho, w=180)
pdf.ln(5)
pdf.set\_font("Arial", size=11)
texto\_graf3 = (
"Este histograma mostra a frequ√™ncia dos n√≠veis de risco em 500 simula√ß√µes aleat√≥rias.\n"
"A linha vertical destaca o seu risco calculado, permitindo comparar com a m√©dia das simula√ß√µes."
)
pdf.multi\_cell(0, 8, clean\_text(texto\_graf3))
\# Cen√°rios
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Cen√°rios: Melhor vs. Pior Caso", ln=True)
pdf.set\_font("Arial", size=11)
pdf.multi\_cell(0, 8, clean\_text(
f"Com base no mesmo valor de opera√ß√£o, o melhor cen√°rio (risco 0%) gera pre√ßo {preco\_melhor}, "
f"enquanto o pior cen√°rio (risco 100%) gera {preco\_pior}."
))
\# Alerta Outlier
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Alerta de Outlier", ln=True)
pdf.set\_font("Arial", size=11)
pdf.multi\_cell(0, 8, clean\_text(alerta\_text))
\# Resumo Executivo e Adequa√ß√£o
pdf.add\_page()
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Resumo Executivo", ln=True)
pdf.set\_font("Arial", size=11)
pdf.multi\_cell(0, 8, clean\_text(resumo))
pdf.ln(5)
pdf.set\_font("Arial", style='B', size=12)
pdf.cell(0, 10, txt="Adequa√ß√£o ao Apetite de Risco", ln=True)
pdf.set\_font("Arial", size=11)
pdf.multi\_cell(0, 8, clean\_text(adequacao\_text))
return BytesIO(pdf.output(dest='S').encode('latin1'))

# Interface de An√°lise de Risco (sem Serasa)

def exibir\_interface\_analise\_risco():
st.header("An√°lise de Risco e Precifica√ß√£o")
client = OpenAI(api\_key=st.secrets\["OPENAI\_API\_KEY"])

```
with st.form("form_operacao"):
    st.subheader("Dados da Opera√ß√£o")
    nome_cliente    = st.text_input("Nome do cliente")
    cnpj_cliente    = st.text_input("CNPJ do cliente (opcional)")
    valor           = st.number_input("Valor da opera√ß√£o (R$)", min_value=0.0, format="%.2f")
    data_operacao   = st.date_input("Data da opera√ß√£o", value=datetime.today(), format="DD/MM/YYYY")
    data_vencimento = st.date_input("Data de vencimento", format="DD/MM/YYYY")
    margem_desejada = st.number_input("Margem desejada (%)", min_value=0.0, value=1.0)
    custo_capital   = st.number_input("Custo do capital (%)", min_value=0.0, value=1.5)

    st.markdown("### Dados de Cr√©dito (manual)")
    score_serasa   = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750)
    idade_empresa  = st.number_input("Idade da empresa (anos)", 0, 100, 5)
    protestos_bool = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"]) == "Sim"
    faturamento    = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f")

    enviar = st.form_submit_button("Simular")
    if not enviar:
        return

    # 1) C√°lculo do prazo
    prazo = (data_vencimento - data_operacao).days

    # 2) Componentes de risco (mesma l√≥gica da aba de cota√ß√£o)
    risco_score = 0 if score_serasa >= 800 else 0.5 if score_serasa >= 600 else 1
    risco_idade = 0 if idade_empresa >= 5 else 0.5
    risco_protesto = 1 if protestos_bool else 0
    risco_fat = 0 if faturamento >= 500000 else 0.5

    # 3) Risco total em %, ponderado
    risco_total = round(
        (risco_score    * 0.40
       + risco_idade    * 0.20
       + risco_protesto * 0.25
       + risco_fat      * 0.15)
       * 100,
    2)

    # 4) Determina√ß√£o do n√≠vel de risco
    cor = "üü¢ Baixo" if risco_total <= 30 else "üü° Moderado" if risco_total <= 60 else "üî¥ Alto"

    # 5) Taxa sugerida pela IA = 10% do risco_total
    taxa_ia = round(risco_total * 0.1, 2)

    # 6) Valor a receber descontando essa taxa
    valor_receber = round(valor * (1 - taxa_ia/100), 2)

    # 7) Exibi√ß√£o dos resultados
    st.markdown("## Resultado da Simula√ß√£o")
    st.write(f"Prazo: {prazo} dias")
    st.markdown(
        f"<p style='font-size:24px; font-weight:bold; margin:10px 0;'>"
        f"üî• Taxa sugerida pela IA: {taxa_ia}%</p>",
        unsafe_allow_html=True
    )
    st.metric("Voc√™ receber√°", formatar_moeda(valor_receber))
    st.write(f"Risco: {cor} ({risco_total}%)")
```

# Interface de Cota√ß√£o de Cr√©dito via XML (sem Serasa)

def exibir\_interface\_cliente\_cotacao():
st.header("Cota√ß√£o de Antecipa√ß√£o de Cr√©dito")
user\_tel, user\_email = "", ""
try:
cursor.execute("SELECT celular, email FROM clients WHERE username = ?", (st.session\_state.username,))
row = cursor.fetchone()
if row:
user\_tel, user\_email = row
except Exception:
pass
st.write("Fa√ßa o upload do **XML da Nota Fiscal Eletr√¥nica (NF-e)** para gerar sua cota√ß√£o:")
nome\_cliente = st.text\_input("Nome do cliente", key="xml\_nome\_cliente")

```
xml_file = st.file_uploader("Upload do XML", type=["xml"])
if xml_file is not None:
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()
        ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}

        valor_nota = float(root.find('.//nfe:vNF', ns).text.replace(",", "."))
        cnpj_dest  = root.find('.//nfe:CNPJ', ns).text
        data_emissao_tag = root.find('.//nfe:dhEmi', ns)
        data_emissao = None
        if data_emissao_tag is not None:
            raw = data_emissao_tag.text[:10]
            date_obj = datetime.strptime(raw, "%Y-%m-%d")
            data_emissao = date_obj.strftime("%d/%m/%Y")

            parcelas = []
            cobr = root.find('.//nfe:cobr', ns)
        if cobr is not None:
            for dup in cobr.findall('nfe:dup', ns):
                numero = dup.find('nfe:nDup', ns).text if dup.find('nfe:nDup', ns) is not None else None
                raw_venc = dup.find('nfe:dVenc', ns).text
                data_venc = datetime.strptime(raw_venc[:10], "%Y-%m-%d").strftime("%d/%m/%Y")
                raw_val = dup.find('nfe:vDup', ns).text.replace(",", ".")
                valor_dup = float(raw_val)
                parcelas.append({
                    "nDup": numero,
                    "dVenc": data_venc,
                    "vDup": formatar_moeda(valor_dup)
            })

        with st.expander("Detalhes da Nota", expanded=False):
            st.write(f"**Valor da nota fiscal:** {formatar_moeda(valor_nota)}")
            st.write(f"**CNPJ do cliente:** {cnpj_dest}")
            if data_emissao:
                st.write(f"**Data de emiss√£o:** {data_emissao}")
            if parcelas:
                st.markdown("**Parcelas e vencimentos:**")
                for p in parcelas:
                    num = f"Parcela {p['nDup']}: " if p['nDup'] else ""
                    st.write(f"- {num}{p['dVenc']} ‚Üí {p['vDup']}")

        st.markdown("### Dados de Cr√©dito (manual)")
        score_xml     = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750, key="xml_score")
        idade_empresa = st.number_input("Idade da empresa (anos)", 0, 100, 5, key="xml_idade")
        protestos     = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"], key="xml_protestos")
        faturamento   = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f", key="xml_fat")

        # C√°lculo do risco total
        risco_score = round(1 / (1 + math.exp(-(600 - score_xml) / 50)), 3)
        risco_idade = round(1 / (1 + math.exp(-(5 - idade_empresa) / 1)), 3)
        risco_protesto = 1 if protestos == "Sim" else 0
        risco_fat = round(1 / (1 + math.exp(-(500_000 - faturamento) / 100_000)), 3)
        risco_total = round(
            (risco_score    * 0.40
            + risco_idade   * 0.20
            + risco_protesto* 0.25
            + risco_fat     * 0.15)
            * 100,
            2
        )

        suggested_taxa = round(risco_total, 2)
        
        taxa_ia = round(risco_total * 0.1, 2)
        st.markdown(
            f"<p style='font-size:24px; font-weight:bold; margin:10px 0;'>üî• Taxa sugerida pela IA: {taxa_ia}%</p>",
            unsafe_allow_html=True
        )

# campo edit√°vel para o cliente definir a taxa de antecipa√ß√£o
        taxa_cliente = st.number_input(
            "Defina a taxa de antecipa√ß√£o (%)",
            min_value=0.0,
            max_value=10.0,
            step=0.1,
            value=taxa_ia,
            format="%.2f"
        )

# c√°lculo do valor a receber com a taxa escolhida pelo cliente
        valor_receber = valor_nota * (1 - taxa_cliente/100)
        st.metric("Voc√™ receber√°", f"{formatar_moeda(valor_receber)}")

        st.write("Este c√°lculo n√£o leva em considera√ß√£o dados de concentra√ß√£o de carteira e eventuais riscos que n√£o apare√ßam no Serasa")

        receber_propostas = st.checkbox(
            "Desejo receber propostas e que entrem em contato comigo"
        )

        if receber_propostas:
            telefone_contato = st.text_input(
                "Telefone para contato",
                value=user_tel,
                key="telefone_contato"
            )
            email_contato = st.text_input(
                "E-mail para contato",
                value=user_email,
                key="email_contato"
            )
        
        if st.button("Solicitar proposta", key="xml_solicitar"):
            msg_body = (
                  f"üì© *Nova solicita√ß√£o de proposta*\n"
                f"‚Ä¢ Cliente: {nome_cliente}\n"
                f"‚Ä¢ CNPJ: {cnpj_dest}\n"
                f"‚Ä¢ Valor da NF-e: {formatar_moeda(valor_nota)}\n"
                f"‚Ä¢ Emiss√£o: {data_emissao or '‚Äî'}\n"
                f"‚Ä¢ Taxa IA sugerida: {taxa_ia}%\n"
                f"‚Ä¢ Taxa escolhida: {taxa_cliente}%\n"
            )
            
            if parcelas:
                msg_body += "‚Ä¢ Parcelas:\n"
                for p in parcelas:
                    num = f"{p['nDup']}. " if p['nDup'] else ""
                    msg_body += f"   ‚Äì {num}{p['dVenc']} ‚Üí {p['vDup']}\n"

            contato = "SIM" if receber_propostas else "N√ÉO"
            msg_body += f"‚Ä¢ Deseja contato: {contato}\n"

            if receber_propostas:
                msg_body += f"‚Ä¢ Telefone para contato: {telefone_contato}\n"
                msg_body += f"‚Ä¢ E-mail para contato: {email_contato}\n"
            client = Client(
                st.secrets["TWILIO_ACCOUNT_SID"],
                st.secrets["TWILIO_AUTH_TOKEN"]
            )
            client.messages.create(
                body=msg_body,
                from_=f"whatsapp:{st.secrets['TWILIO_WHATSAPP_FROM']}",
                to  =f"whatsapp:{st.secrets['ADMIN_WHATSAPP_TO']}"
            )
            st.success("‚úÖ Proposta enviada!")
            cursor.execute(
                """
                INSERT INTO proposals
                  (nome_cliente, cnpj, valor_nota, taxa_ia, taxa_cliente,
                   deseja_contato, telefone_contato, email_contato, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                (
                    nome_cliente,
                    cnpj_dest,
                    valor_nota,
                    taxa_ia,
                    taxa_cliente,
                    contato,
                    telefone_contato,   # <- adiciona aqui
                    email_contato,      # <- e aqui
                    datetime.now().isoformat()
                )
            )
            conn.commit()

    except Exception as e:
        st.error(f"Erro ao processar o XML: {e}")
            
```

# --- Roteamento p√≥s-login ---

if st.session\_state.role == 'admin':
st.header("üìã Propostas Recebidas (Admin)")
if os.path.exists(DATA\_PATH):
conn = sqlite3.connect(DATA\_PATH, check\_same\_thread=False)
df = pd.read\_sql\_query(
"""
SELECT
p.id                   AS "ID",
c.username             AS "Nome da Empresa",
p.telefone\_contato     AS "Telefone",
p.email\_contato        AS "E-mail",
p.nome\_cliente         AS "Nome no XML",
p.cnpj                 AS "CNPJ (NF-e)",
p.valor\_nota           AS "Valor NF-e",
p.taxa\_ia              AS "Taxa IA (%)",
p.taxa\_cliente         AS "Taxa Cliente (%)",
p.deseja\_contato       AS "Deseja Contato",
p.created\_at           AS "Solicitado em"
FROM proposals p
LEFT JOIN clients c
ON p.cnpj = c.cnpj
ORDER BY p.created\_at DESC

```
        """,
        conn
    )
    st.dataframe(df)
else:
    st.info("Ainda n√£o h√° propostas.")
```

elif st.session\_state.role == 'cliente':
st.header("üë§ Dashboard do Cliente")
tab1, tab2 = st.tabs(\["üí∞ Cota√ß√£o de Antecipa√ß√£o", "‚öôÔ∏è An√°lise de Risco"])
with tab1:
exibir\_interface\_cliente\_cotacao()
with tab2:
exibir\_interface\_analise\_risco()

# Configura√ß√£o de localiza√ß√£o para formata√ß√£o brasileira

try:
locale.setlocale(locale.LC\_ALL, 'pt\_BR.UTF-8')
except:
locale.setlocale(locale.LC\_ALL, '')  # fallback

st.stop()

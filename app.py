import streamlit as st
from openai import OpenAI, RateLimitError
from datetime import datetime
import requests
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from matplotlib.ticker import PercentFormatter
from io import BytesIO
from fpdf import FPDF
import unicodedata
import tempfile
import locale
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import math
from twilio.rest import Client
import hashlib
import os
import sqlite3
from sqlalchemy import create_engine, text
import streamlit as st 
from io import StringIO
import sqlite3
import os
DATA_PATH = "clientes.db" 
# Dicion√°rio com permiss√µes por plano de assinatura
# Permiss√µes por plano
PERMISSOES_POR_PLANO = {
    "B√°sico": ["cotacao"],
    "Intermedi√°rio": ["cotacao", "propostas"],
    "Avan√ßado": ["cotacao", "propostas", "analise_risco", "pdf", "serasa"]
}


# ‚Äî DEV: zera o .db para for√ßar recria√ß√£o com esquema correto ‚Äî
 
st.set_page_config(page_title="Simula√ß√£o Antecipa√ß√£o", layout="centered")

if not os.path.exists(DATA_PATH):
    conn = sqlite3.connect(DATA_PATH, check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE proposals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome_cliente TEXT,
        cnpj TEXT,
        valor_nota REAL,
        taxa_ia REAL,
        taxa_cliente REAL,
        deseja_contato TEXT,
        telefone_contato TEXT,
        email_contato TEXT,
        created_at TEXT
    )
    """)

    cursor.execute("""
    CREATE TABLE clients (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        password_hash TEXT,
        cnpj TEXT,
        celular TEXT,
        email TEXT,
        plano TEXT,
        created_at TEXT
    )
    """)

    conn.commit()

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode("utf-8")).hexdigest()

def register_client(username, password, cnpj, celular, email, plano):
    pwd_hash = hash_password(password)
    try:
        cursor.execute(
            """
            INSERT INTO clients
            (username, password_hash, cnpj, celular, email, plano, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """,
            (username, pwd_hash, cnpj, celular, email, plano, datetime.now().isoformat())
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    except sqlite3.Error as e:
        st.error(f"Erro no banco de dados: {e}")
        return False

def authenticate_client(username, password):
    cursor.execute("SELECT password_hash FROM clients WHERE username = ?", (username,))
    row = cursor.fetchone()
    if row and row[0] == hash_password(password):
        return True
    return False
    
    # Conex√£o com o banco de dados (se ainda n√£o estiver criado)
conn = sqlite3.connect(DATA_PATH, check_same_thread=False)
cursor = conn.cursor()

# Verifica as colunas existentes da tabela 'proposals'
cursor.execute("PRAGMA table_info(proposals)")
info = cursor.fetchall()
colunas = [col[1] for col in info]  # aqui nasce a vari√°vel 'colunas'

# Adiciona 'telefone_contato' se n√£o existir
if 'telefone_contato' not in colunas:
    try:
        cursor.execute("ALTER TABLE proposals ADD COLUMN telefone_contato TEXT")
    except sqlite3.OperationalError:
        pass  # ignora se j√° existir

# Adiciona 'email_contato' se n√£o existir
if 'email_contato' not in colunas:
    try:
        cursor.execute("ALTER TABLE proposals ADD COLUMN email_contato TEXT")
    except sqlite3.OperationalError:
        pass

conn.commit()

# --- Fim da conex√£o SQLite ---


# --- Navega√ß√£o inicial via simula√ß√£o ---
if 'navigate' not in st.session_state:
    st.session_state['navigate'] = None

if st.session_state.navigate == "register":
    # fluxo principal ir√° lidar com cadastro
    pass
elif st.session_state.navigate == "login":
    # fluxo principal ir√° lidar com login
    pass
else:
    # P√°gina Inicial (antes do login)
    # --- Estilos ---
    st.markdown("""
    <style>
      .stApp { background-color: #FFFFFF; }
      .header { font-size: 36px; font-weight: bold; text-align: center; margin-bottom: 10px; }
      .subheader { font-size: 18px; text-align: center; margin-bottom: 30px; color: #555555; }
      .resultado { background-color: #E3F2FD; padding: 20px; border-radius: 8px; text-align: center; margin-top: 20px; }
      .cta { background-color: #0D47A1; color: white; padding: 15px; border-radius: 5px; text-align: center; margin-top: 30px; width: 100%; }
      .cta:hover { background-color: #1565C0; }
    </style>
    """, unsafe_allow_html=True)

    # --- Cabe√ßalho ---
    st.markdown('<div class="header">Antecipe agora. Sem compromisso.</div>', unsafe_allow_html=True)
    st.markdown('<div class="subheader">Envie uma nota fiscal eletr√¥nica (.XML) e descubra agora quanto voc√™ pode antecipar.</div>', unsafe_allow_html=True)

    # --- Upload de XML ---
    xml_files = st.file_uploader("Escolha seus arquivos XML", type=["xml"], accept_multiple_files=True)

    valor_total = 0
    if xml_files:
        for xml_file in xml_files:
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}
                valor_nota = float(root.find('.//nfe:vNF', ns).text.replace(',', '.'))
                valor_receber = valor_nota * (1 - 2.2 / 100)
                valor_total += valor_nota

                st.markdown('<div class="resultado">', unsafe_allow_html=True)
                st.markdown(f"**Arquivo:** {xml_file.name}", unsafe_allow_html=True)
                st.markdown(f"**Valor da nota:** R$ {valor_nota:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."), unsafe_allow_html=True)
                st.markdown(f"**Taxa sugerida:** 2,2%", unsafe_allow_html=True)
                st.markdown(f"**Valor a receber:** R$ {valor_receber:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."), unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Erro ao processar {xml_file.name}: {e}")
        valor_total_receber = valor_total * (1 - 2.2 / 100)

        st.markdown("""
        <div style='background-color:#E3F2FD; padding: 20px; border-radius: 10px; margin-top: 20px; text-align:center;'>
            <p style='font-size:22px; font-weight:bold; margin-bottom:10px;'>üìÑ Valor total das notas:</p>
            <p style='font-size:28px; color:#0D47A1; font-weight:bold;'>R$ {valor_total}</p>

            <p style='font-size:22px; font-weight:bold; margin-top:20px;'>üìä Taxa da IA aplicada:</p>
            <p style='font-size:26px; color:#F57C00; font-weight:bold;'>{taxa_ia}%</p>

            <p style='font-size:22px; font-weight:bold; margin-top:20px;'>üí∏ Valor total a receber:</p>
            <p style='font-size:28px; color:#2E7D32; font-weight:bold;'>R$ {valor_receber}</p>
        </div>
        """.format(
            valor_total=f"{valor_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
            valor_receber=f"{valor_total_receber:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
            taxa_ia=f"{taxa_ia:.2f}".replace(".", ",")
        ), unsafe_allow_html=True)



    else:
        st.info('Fa√ßa upload de um ou mais XMLs para come√ßar a simula√ß√£o.')


    # --- Bot√µes de Navega√ß√£o ---
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Assinar e continuar"):
            st.session_state.navigate = "register"
    with col2:
        if st.button("J√° √© cliente? Fa√ßa login."):
            st.session_state.navigate = "login"

    # Interrompe antes do fluxo de login/cadastro
    st.stop()

st.markdown(
    """
    <style>
      /* Bot√µes padr√£o e elementos de a√ß√£o */
      .stButton > button,
      button,
      [data-testid="stToolbar"],
      .css-1offfwp.edgvbvh3 {            /* classe gen√©rica de bot√µes */
        background-color: #0D47A1 !important;  /* azul escuro */
        color: #FFFFFF     !important;  /* texto branco */
      }

      /* Itens selecionados da sidebar/nav */
      [data-testid="stSidebarNav"] > div[role="button"][aria-selected="true"] {
        background-color: #0A174E !important;  /* tom ainda mais escuro */
        color: #FFFFFF       !important;
      }

      /* Cabe√ßalho fixo (toolbar superior) */
      [data-testid="stToolbar"] {
        background-color: #0D47A1 !important;
      }
    </style>
    """,
    unsafe_allow_html=True,
)



def authenticate_client(username, password):
    cursor.execute("SELECT password_hash FROM clients WHERE username = ?", (username,))
    row = cursor.fetchone()
    if row and row[0] == hash_password(password):
        return True
    return False

ok_register = False
if 'role' not in st.session_state:
    st.title("üîê Seja bem vindo a Confian√ßa")
    modo = st.radio("Escolha:", ["Entrar", "Cadastrar-se"])
    if modo == "Cadastrar-se":
       with st.form("form_register"):
    # Dados de acesso e perfil
            u       = st.text_input("Usu√°rio")
            p       = st.text_input("Senha", type="password")
            p2      = st.text_input("Confirme a senha", type="password")
            cnpj    = st.text_input("CNPJ")
            celular = st.text_input("Celular")
            email   = st.text_input("Email")

            plano = st.selectbox(
               "Pre√ßo plano de assinatura",
                [
                    "B√°sico ‚Äì R$ 99,90",
                    "Intermedi√°rio ‚Äì R$ 299,90",
                    "Avan√ßado ‚Äì R$ 499,90"
                ]
            )

            periodicidade = st.selectbox(
                "Renova√ß√£o do Plano",
                ["Mensal", "Anual - 10% de desconto"]
            )

            preco_mensal = float(plano.split("R$")[1].replace(".", "").replace(",", "."))
            preco_final = preco_mensal if periodicidade == "Mensal" else preco_mensal * 12 * 0.9

            st.markdown(
                f"**Valor a pagar ({periodicidade.lower()}):** R$ {preco_final:,.2f}"
                .replace(",", "X").replace(".", ",").replace("X", "."),
                unsafe_allow_html=True
            )

    # Agora os campos de cart√£o de cr√©dito est√£o dentro do form!
            st.subheader("Dados do Cart√£o de Cr√©dito")

            cc_number = st.text_input(
                "N√∫mero do Cart√£o",
                placeholder="0000 0000 0000 0000",
                max_chars=19
            )
            cc_name = st.text_input("Nome impresso no cart√£o")

            col1, col2, col3 = st.columns([2,2,1])
            with col1:
                mes = st.selectbox("M√™s de validade", [f"{m:02d}" for m in range(1,13)])
            with col2:
                ano = st.selectbox("Ano de validade", [str(y) for y in range(datetime.now().year, datetime.now().year+10)])
            with col3:
                cvv = st.text_input("CVV", type="password", max_chars=4)

            # ‚úÖ Bot√£o dentro do form, agora funciona perfeitamente
            ok_register = st.form_submit_button("Criar conta e pagar")
        # Extrai valor num√©rico do plano

   

    if ok_register:
        # aqui voc√™ deve validar todos os campos, processar o pagamento via gateway e s√≥ ent√£o:
        if not all([u, p, p2, cnpj, celular, email, cc_number, cc_name, mes, ano, cvv]):
            st.error("Preencha todos os campos do cadastro e do cart√£o")
        elif p != p2:
            st.error("As senhas n√£o coincidem")
        else:
            # Exemplo: processar pagamento antes de registrar
            pagamento_sucesso = True  # <- substitua pela chamada ao seu gateway

            if pagamento_sucesso and register_client(u, p, cnpj, celular, email, plano):
                st.success(f"Conta criada! Plano: {plano} ‚Äì Cobran√ßa: {periodicidade}")

            else:
                st.error("Falha no pagamento ou usu√°rio j√° existe.")

    elif modo == "Entrar":  # Entrar
        with st.form("form_login"):
            u = st.text_input("Usu√°rio")
            p = st.text_input("Senha", type="password")
            ok_login = st.form_submit_button("Entrar")
        if ok_login:
            # admin via secrets
            if u == st.secrets["ADMIN"]["USERNAME"] and p == st.secrets["ADMIN"]["PASSWORD"]:
                st.session_state.role = 'admin'
            # cliente via DB
            elif authenticate_client(u, p):
                cursor.execute("SELECT plano FROM clients WHERE username = ?", (u,))
                row = cursor.fetchone()
                if row:
                    plano_completo = row[0]  # Ex: "Intermedi√°rio ‚Äì R$ 299,90"
                    plano_limpo = plano_completo.split("‚Äì")[0].strip()  # Fica s√≥ "Intermedi√°rio"
                    st.session_state.role = 'cliente'
                    st.session_state.username = u
                    st.session_state.plano = plano_limpo
                else:
                    st.error("Plano de assinatura n√£o encontrado.")

        else:
            st.error("Usu√°rio ou senha inv√°lidos")
    st.stop()
        
def formatar_moeda(valor):
    """
    Formata valor num√©rico como moeda brasileira.
    """
    try:
        return f"R$ {valor:,.2f}".replace(",", "v").replace(".", ",").replace("v", ".")
    except:
        return f"R$ {valor:.2f}".replace(".", ",")
def calcular_preco_minimo(custo_base, risco_inadimplencia, margem_desejada_percentual):
    """
    Calcula o pre√ßo m√≠nimo com base no custo, risco e margem desejada.
    """
    ajuste_risco = 1 + risco_inadimplencia
    margem = 1 + (margem_desejada_percentual / 100)
    return custo_base * ajuste_risco * margem

def clean_text(text):
    """
    Normaliza texto para evitar problemas de codifica√ß√£o no PDF.
    """
    return unicodedata.normalize('NFKD', text).encode('latin1', 'ignore').decode('latin1')

def gerar_pdf(data_dict,
               grafico_risco_bytes,
               grafico_fatores_bytes,
               grafico_dist_bytes,
               preco_melhor,
               preco_pior,
               alerta_text,
               resumo,
               adequacao_text):
    pdf = FPDF()
    # P√°gina t√≠tulo e dados b√°sicos
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Relat√≥rio de Precifica√ß√£o e Risco de Cr√©dito", ln=True, align='C')
    pdf.ln(10)
    for chave, valor in data_dict.items():
        pdf.cell(0, 8, txt=clean_text(f"{chave}: {valor}"), ln=True)
    pdf.ln(5)
    # Explica√ß√£o simples
    pdf.set_font("Arial", style='I', size=11)
    texto_inf = (
        "Como a IA chegou no pre√ßo m√≠nimo?\n"
        "- Considera o valor do empr√©stimo e protege-se do risco.\n"
        "- Adiciona margem de lucro para garantir rentabilidade.\n"
        "- Oferece pre√ßo justo, seguro e vantajoso para todos."
    )
    pdf.multi_cell(0, 8, clean_text(texto_inf))
    # Gr√°fico Risco x Retorno
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="An√°lise de Risco x Retorno", ln=True)
    if grafico_risco_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_risco_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf1 = (
        "Este gr√°fico mostra como o risco de inadimpl√™ncia (eixo horizontal) se relaciona ao retorno esperado em R$.\n"
        "- √Årea verde (0% a 30%): baixo risco e potencial de retorno est√°vel.\n"
        "- √Årea amarela (30% a 60%): risco intermedi√°rio; aten√ß√£o ao investimento.\n"
        "- √Årea vermelha (60% a 100%): alto risco; retorno incerto."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf1))
    # Gr√°fico Fatores
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Fatores de Risco", ln=True)
    if grafico_fatores_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_fatores_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf2 = (
        "Este gr√°fico de barras indica a contribui√ß√£o percentual de cada fator para o risco total:\n"
        "- Rating: confiabilidade de cr√©dito do cliente.\n"
        "- Idade da empresa: maturidade de mercado.\n"
        "- Protestos: hist√≥rico de d√≠vidas.\n"
        "- Faturamento: solidez financeira."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf2))
    # Distribui√ß√£o de Risco
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Distribui√ß√£o de Risco (Simula√ß√µes)", ln=True)
    if grafico_dist_bytes:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(grafico_dist_bytes.getvalue())
            caminho = tmp.name
        pdf.image(caminho, w=180)
        pdf.ln(5)
    pdf.set_font("Arial", size=11)
    texto_graf3 = (
        "Este histograma mostra a frequ√™ncia dos n√≠veis de risco em 500 simula√ß√µes aleat√≥rias.\n"
        "A linha vertical destaca o seu risco calculado, permitindo comparar com a m√©dia das simula√ß√µes."
    )
    pdf.multi_cell(0, 8, clean_text(texto_graf3))
    # Cen√°rios
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Cen√°rios: Melhor vs. Pior Caso", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(
        f"Com base no mesmo valor de opera√ß√£o, o melhor cen√°rio (risco 0%) gera pre√ßo {preco_melhor}, "
        f"enquanto o pior cen√°rio (risco 100%) gera {preco_pior}."
    ))
    # Alerta Outlier
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Alerta de Outlier", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(alerta_text))
    # Resumo Executivo e Adequa√ß√£o
    pdf.add_page()
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Resumo Executivo", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(resumo))
    pdf.ln(5)
    pdf.set_font("Arial", style='B', size=12)
    pdf.cell(0, 10, txt="Adequa√ß√£o ao Apetite de Risco", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, clean_text(adequacao_text))
    return BytesIO(pdf.output(dest='S').encode('latin1'))

# Interface de An√°lise de Risco (sem Serasa)
def exibir_interface_analise_risco():
    st.header("An√°lise de Risco e Precifica√ß√£o")
    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

    with st.form("form_operacao"):
        st.subheader("Dados da Opera√ß√£o")
        nome_cliente    = st.text_input("Nome do cliente")
        cnpj_cliente    = st.text_input("CNPJ do cliente (opcional)")
        valor           = st.number_input("Valor da opera√ß√£o (R$)", min_value=0.0, format="%.2f")
        data_operacao   = st.date_input("Data da opera√ß√£o", value=datetime.today(), format="DD/MM/YYYY")
        data_vencimento = st.date_input("Data de vencimento", format="DD/MM/YYYY")
        margem_desejada = st.number_input("Margem desejada (%)", min_value=0.0, value=1.0)
        custo_capital   = st.number_input("Custo do capital (%)", min_value=0.0, value=1.5)

        st.markdown("### Dados de Cr√©dito (manual)")
        score_serasa   = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750)
        idade_empresa  = st.number_input("Idade da empresa (anos)", 0, 100, 5)
        protestos_bool = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"]) == "Sim"
        faturamento    = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f")

        enviar = st.form_submit_button("Simular")
        if not enviar:
            return

        # 1) C√°lculo do prazo
        prazo = (data_vencimento - data_operacao).days

        # 2) Componentes de risco (mesma l√≥gica da aba de cota√ß√£o)
        risco_score = 0 if score_serasa >= 800 else 0.5 if score_serasa >= 600 else 1
        risco_idade = 0 if idade_empresa >= 5 else 0.5
        risco_protesto = 1 if protestos_bool else 0
        risco_fat = 0 if faturamento >= 500000 else 0.5

        # 3) Risco total em %, ponderado
        risco_total = round(
            (risco_score    * 0.40
           + risco_idade    * 0.20
           + risco_protesto * 0.25
           + risco_fat      * 0.15)
           * 100,
        2)

        # 4) Determina√ß√£o do n√≠vel de risco
        cor = "üü¢ Baixo" if risco_total <= 30 else "üü° Moderado" if risco_total <= 60 else "üî¥ Alto"

        # 5) Taxa sugerida pela IA = 10% do risco_total
        taxa_ia = round(risco_total * 0.1, 2)

        # 6) Valor a receber descontando essa taxa
        valor_receber = round(valor * (1 - taxa_ia/100), 2)

        # 7) Exibi√ß√£o dos resultados
        st.markdown("## Resultado da Simula√ß√£o")
        st.write(f"Prazo: {prazo} dias")
        st.markdown(
            f"<p style='font-size:24px; font-weight:bold; margin:10px 0;'>"
            f"üî• Taxa sugerida pela IA: {taxa_ia}%</p>",
            unsafe_allow_html=True
        )
        st.metric("Voc√™ receber√°", formatar_moeda(valor_receber))
        st.write(f"Risco: {cor} ({risco_total}%)")



# Interface de Cota√ß√£o de Cr√©dito via XML (sem Serasa)
def exibir_interface_cliente_cotacao(permissoes):
    st.header("Cota√ß√£o de Antecipa√ß√£o de Cr√©dito")
    user_tel, user_email = "", ""
    try:
        cursor.execute("SELECT celular, email FROM clients WHERE username = ?", (st.session_state.username,))
        row = cursor.fetchone()
        if row:
            user_tel, user_email = row
    except Exception:
        pass

    st.write("Fa√ßa o upload do **XML da Nota Fiscal Eletr√¥nica (NF-e)** para gerar sua cota√ß√£o:")
    nome_cliente = st.text_input("Nome do cliente", key="xml_nome_cliente")
    xml_files = st.file_uploader("Upload de XMLs", type=["xml"], accept_multiple_files=True)

    if xml_files:
        for xml_file in xml_files:
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}

                valor_nota = float(root.find('.//nfe:vNF', ns).text.replace(",", "."))
                cnpj_dest  = root.find('.//nfe:CNPJ', ns).text
                data_emissao_tag = root.find('.//nfe:dhEmi', ns)
                data_emissao = None

                if data_emissao_tag is not None:
                    raw = data_emissao_tag.text[:10]
                    date_obj = datetime.strptime(raw, "%Y-%m-%d")
                    data_emissao = date_obj.strftime("%d/%m/%Y")

                st.markdown("----")
                st.subheader(f"üßæ Nota: {xml_file.name}")
                st.write(f"Valor: {formatar_moeda(valor_nota)}")
                st.write(f"CNPJ: {cnpj_dest}")
                if data_emissao:
                    st.write(f"Data de emiss√£o: {data_emissao}")

            except Exception as e:
                st.error(f"Erro ao processar {xml_file.name}: {e}")

                if parcelas:
                    st.markdown("**Parcelas e vencimentos:**")
                    for p in parcelas:
                        num = f"Parcela {p['nDup']}: " if p['nDup'] else ""
                        st.write(f"- {num}{p['dVenc']} ‚Üí {p['vDup']}")

            st.markdown("### Dados de Cr√©dito (manual)")
            score_xml     = st.number_input("Score de Cr√©dito (0 a 1000)", 0, 1000, 750, key="xml_score")
            idade_empresa = st.number_input("Idade da empresa (anos)", 0, 100, 5, key="xml_idade")
            protestos     = st.selectbox("Protestos ou d√≠vidas p√∫blicas?", ["N√£o", "Sim"], key="xml_protestos")
            faturamento   = st.number_input("√öltimo faturamento (R$)", min_value=0.0, format="%.2f", key="xml_fat")

            # C√°lculo do risco total
            risco_score = round(1 / (1 + math.exp(-(600 - score_xml) / 50)), 3)
            risco_idade = round(1 / (1 + math.exp(-(5 - idade_empresa) / 1)), 3)
            risco_protesto = 1 if protestos == "Sim" else 0
            risco_fat = round(1 / (1 + math.exp(-(500_000 - faturamento) / 100_000)), 3)
            risco_total = round(
                (risco_score    * 0.40
                + risco_idade   * 0.20
                + risco_protesto* 0.25
                + risco_fat     * 0.15)
                * 100,
                2
            )

            taxa_ia = round(risco_total * 0.1, 2)
            taxa_cliente = st.number_input(
                "Defina a taxa de antecipa√ß√£o (%)",
                min_value=0.0,
                max_value=10.0,
                step=0.1,
                value=taxa_ia,
                format="%.2f"
            )
            valor_receber = valor_nota * (1 - taxa_cliente/100)
            st.metric("Voc√™ receber√°", f"{formatar_moeda(valor_receber)}")
            st.write("Este c√°lculo n√£o leva em considera√ß√£o dados de concentra√ß√£o de carteira e eventuais riscos que n√£o apare√ßam no Serasa")

            receber_propostas = st.checkbox("Desejo receber propostas e que entrem em contato comigo")
            if receber_propostas:
                telefone_contato = st.text_input("Telefone para contato", value=user_tel, key="telefone_contato")
                email_contato = st.text_input("E-mail para contato", value=user_email, key="email_contato")
            else:
                telefone_contato = ""
                email_contato = ""

            # ‚úÖ Aqui est√° o bot√£o, agora posicionado corretamente
            if "propostas" in permissoes:
                if st.button("Solicitar proposta", key="xml_solicitar"):
                    try:
                        msg_body = (
                            f"üì© *Nova solicita√ß√£o de proposta*\n"
                            f"‚Ä¢ Cliente: {nome_cliente}\n"
                            f"‚Ä¢ CNPJ: {cnpj_dest}\n"
                            f"‚Ä¢ Valor da NF-e: {formatar_moeda(valor_nota)}\n"
                            f"‚Ä¢ Emiss√£o: {data_emissao or '‚Äî'}\n"
                            f"‚Ä¢ Taxa IA sugerida: {taxa_ia}%\n"
                            f"‚Ä¢ Taxa escolhida: {taxa_cliente}%\n"
                        )

                        if parcelas:
                            msg_body += "‚Ä¢ Parcelas:\n"
                            for p in parcelas:
                                num = f"{p['nDup']}. " if p['nDup'] else ""
                                msg_body += f"   ‚Äì {num}{p['dVenc']} ‚Üí {p['vDup']}\n"

                        contato = "SIM" if receber_propostas else "N√ÉO"
                        msg_body += f"‚Ä¢ Deseja contato: {contato}\n"
                        if receber_propostas:
                            msg_body += f"‚Ä¢ Telefone para contato: {telefone_contato}\n"
                            msg_body += f"‚Ä¢ E-mail para contato: {email_contato}\n"

                        client = Client(
                            st.secrets["TWILIO_ACCOUNT_SID"],
                            st.secrets["TWILIO_AUTH_TOKEN"]
                        )
                        client.messages.create(
                            body=msg_body,
                            from_="whatsapp:+14155238886",
                            to=f"whatsapp:{st.secrets['ADMIN_WHATSAPP_TO']}"
                        )
                        st.success("‚úÖ Proposta enviada!")

                        cursor.execute(
                            """
                            INSERT INTO proposals
                              (nome_cliente, cnpj, valor_nota, taxa_ia, taxa_cliente,
                               deseja_contato, telefone_contato, email_contato, created_at)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                            """,
                            (
                                nome_cliente,
                                cnpj_dest,
                                valor_nota,
                                taxa_ia,
                                taxa_cliente,
                                contato,
                                telefone_contato,
                                email_contato,
                                datetime.now().isoformat()
                            )
                        )
                        conn.commit()
                    except Exception as e:
                        st.error(f"Erro ao processar a proposta: {e}")
            else:
                st.warning("‚ö†Ô∏è Seu plano atual n√£o permite solicitar propostas.")

                

# --- Roteamento p√≥s-login ---
if st.session_state.role == 'admin':
    # ‚Äî DEBUG: colunas no momento do Admin ‚Äî
    cursor.execute("PRAGMA table_info(proposals)")
    colunas_admin = [c[1] for c in cursor.fetchall()]

    st.header("üìã Propostas Recebidas")
    sql = """
      SELECT
        p.id                   AS "ID",
        c.username             AS "Nome da Empresa",
        p.telefone_contato     AS "Telefone",
        p.email_contato        AS "E-mail",
        p.nome_cliente         AS "Nome no XML",
        p.cnpj                 AS "CNPJ (NF-e)",
        p.valor_nota           AS "Valor NF-e",
        p.taxa_ia              AS "Taxa IA (%)",
        p.taxa_cliente         AS "Taxa Cliente (%)",
        p.deseja_contato       AS "Deseja Contato",
        p.created_at           AS "Solicitado em"
      FROM proposals p
      LEFT JOIN clients c
        ON p.cnpj = c.cnpj
      ORDER BY p.created_at DESC
    """
    try:
        df = pd.read_sql_query(sql, conn)
        st.dataframe(df)
    except Exception as e:
        st.error(f"Erro ao buscar propostas: {e}")
    else:
        st.info("Ainda n√£o h√° propostas.")
elif st.session_state.role == 'cliente':
    st.header("üë§ Dashboard do Cliente")
    
    plano_atual = st.session_state.get("plano", "").split("‚Äì")[0].strip()
    permissoes = PERMISSOES_POR_PLANO.get(plano_atual, [])

    st.write("Plano ativo:", plano_atual)

    abas = []
    if "cotacao" in permissoes:
        abas.append("üí∞ Cota√ß√£o de Antecipa√ß√£o")
    if "analise_risco" in permissoes:
        abas.append("‚öôÔ∏è An√°lise de Risco")

    if abas:
        tabs = st.tabs(abas)
        if "üí∞ Cota√ß√£o de Antecipa√ß√£o" in abas:
            with tabs[abas.index("üí∞ Cota√ß√£o de Antecipa√ß√£o")]:
                exibir_interface_cliente_cotacao(permissoes)
        if "‚öôÔ∏è An√°lise de Risco" in abas:
            with tabs[abas.index("‚öôÔ∏è An√°lise de Risco")]:
                exibir_interface_analise_risco()
    else:
        st.warning("Seu plano atual n√£o d√° acesso a funcionalidades. Atualize para aproveitar a plataforma.")


# Configura√ß√£o de localiza√ß√£o para formata√ß√£o brasileira
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')  # fallback


st.stop()
